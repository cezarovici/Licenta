/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * OpenAPI definition
 * Service version: v0
 */
import { URL } from "https://jslib.k6.io/url/1.0.0/index.js";

import http from "k6/http";
import type { Params, Response } from "k6/http";

export interface LocalTime {
  hour?: number;
  minute?: number;
  second?: number;
  nano?: number;
}

export interface OperatingHourDTO {
  dayOfWeek: string;
  openTime: LocalTime;
  closeTime: LocalTime;
}

export interface UpdateOperatingHoursRequest {
  hours: OperatingHourDTO[];
}

export interface FacilityDTO {
  id: number;
  name: string;
}

export interface UpdateFacilitiesRequest {
  facilityIds: FacilityDTO[];
}

export type BookingRulesUpdateRequestCancellationPolicy =
  (typeof BookingRulesUpdateRequestCancellationPolicy)[keyof typeof BookingRulesUpdateRequestCancellationPolicy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BookingRulesUpdateRequestCancellationPolicy = {
  FLEXIBLE: "FLEXIBLE",
  MODERATE: "MODERATE",
  STRICT: "STRICT",
} as const;

export interface BookingRulesUpdateRequest {
  maxBookingAdvanceDays: number;
  cancellationPolicy: BookingRulesUpdateRequestCancellationPolicy;
}

export type BookingRulesInfoDTOCancellationPolicy =
  (typeof BookingRulesInfoDTOCancellationPolicy)[keyof typeof BookingRulesInfoDTOCancellationPolicy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BookingRulesInfoDTOCancellationPolicy = {
  FLEXIBLE: "FLEXIBLE",
  MODERATE: "MODERATE",
  STRICT: "STRICT",
} as const;

export interface BookingRulesInfoDTO {
  maxBookingAdvanceDays?: number;
  cancellationPolicy: BookingRulesInfoDTOCancellationPolicy;
}

export interface BusinessLocationsDTO {
  id: number;
  businessName: string;
  website?: string;
  locations: LocationSummaryDTO[];
}

export interface LocationDetailDTO {
  id: number;
  name: string;
  address: string;
  latitude?: number;
  longitude?: number;
  business: BusinessLocationsDTO;
  photos: LocationPhotoDTO[];
  operatingHours: OperatingHourDTO[];
  facilities: FacilityDTO[];
  upcomingEventsCount: number;
  pricingRules: PricingRuleDTO[];
  sportConfigurations: SportConfigurationDTO[];
  bookingRules: BookingRulesInfoDTO;
}

export interface LocationPhotoDTO {
  id?: number;
  photoUrl: string;
  description?: string;
  isPrimary: boolean;
}

export interface LocationSummaryDTO {
  id: number;
  name: string;
  address: string;
  latitude?: number;
  longitude?: number;
}

export interface PricingRuleDTO {
  id?: number;
  ruleName: string;
  daysOfWeek: string[];
  startTime?: LocalTime;
  endTime?: LocalTime;
  pricePerHour: number;
}

export interface SportConfigurationDTO {
  id?: number;
  sportName: string;
  surfaceType?: string;
  recommendedCapacity?: string;
  minBookingDuration: number;
  bookingSlotIncrement: number;
}

export interface UpdateLogoRequest {
  logoUrl: string;
}

export interface Unit {
  [key: string]: unknown;
}

export interface CompleteClientRegistrationRequest {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  profilePhotoUrl?: string;
  bio?: string;
}

export interface CompleteBusinessRegistrationRequest {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  businessName: string;
  businessDescription: string;
  locationName: string;
  locationAddress: string;
}

export interface LocationCreateRequestDTO {
  name: string;
  address: string;
  latitude?: number;
  longitude?: number;
  businessId: number;
}

export interface LocationResponse {
  id: number;
  name: string;
  address: string;
  latitude?: number;
  longitude?: number;
  businessId: number;
}

export interface PhotoCreateRequest {
  url: string;
  description?: string;
}

export interface CreateCompleteLocationRequestDTO {
  name: string;
  address: string;
  latitude?: number;
  longitude?: number;
  photos?: PhotoCreateRequest[];
  operatingHours?: OperatingHourDTO[];
  facilityIds?: number[];
  pricingRules?: PricingRuleDTO[];
  sportConfigurations?: SportConfigurationDTO[];
  bookingRules?: BookingRulesUpdateRequest;
}

export interface BusinessPhotoDTO {
  id: number;
  photoUrl: string;
  description?: string;
  isPrimary: boolean;
}

export interface ClientProfileUpdateRequestDTO {
  firstName?: string;
  lastName?: string;
  profilePhotoUrl?: string;
  bio?: string;
  favoriteSports?: string;
}

export interface ClientProfileDTO {
  accountId: number;
  firstName: string;
  lastName: string;
  profilePhotoUrl: string;
  bio?: string;
  favoriteSports?: string;
  upcomingEvents: EventSummaryDTO[];
  pastEvents: EventSummaryDTO[];
}

export type EventSummaryDTOType =
  (typeof EventSummaryDTOType)[keyof typeof EventSummaryDTOType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventSummaryDTOType = {
  PUBLIC: "PUBLIC",
  PRIVATE: "PRIVATE",
} as const;

export type EventSummaryDTOStatus =
  (typeof EventSummaryDTOStatus)[keyof typeof EventSummaryDTOStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventSummaryDTOStatus = {
  PENDING_APPROVAL: "PENDING_APPROVAL",
  PLANNED: "PLANNED",
  ACTIVE: "ACTIVE",
  COMPLETED: "COMPLETED",
  CANCELLED: "CANCELLED",
} as const;

export interface EventSummaryDTO {
  id?: number;
  title: string;
  sport: string;
  eventDateTime: string;
  type: EventSummaryDTOType;
  status: EventSummaryDTOStatus;
  location: LocationSummaryDTO;
  participantsCount: number;
}

export interface LocationUpdateRequest {
  name?: string;
  address?: string;
  latitude?: number;
  longitude?: number;
}

export interface BusinessUpdateRequest {
  name?: string;
  logoUrl?: string;
  description?: string;
  websiteUrl?: string;
  phoneNumber?: string;
  email?: string;
}

export interface BusinessDTO {
  id: number;
  name: string;
  logoUrl?: string;
  photos: BusinessPhotoDTO[];
  locations: LocationSummaryDTO[];
  description?: string;
  websiteUrl?: string;
  phoneNumber?: string;
  email?: string;
}

export interface UserTypeDTO {
  accountId: number;
  name: string;
}

export interface ClientDTO {
  id?: number;
  username: string;
}

export type EventDetailDTOType =
  (typeof EventDetailDTOType)[keyof typeof EventDetailDTOType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventDetailDTOType = {
  PUBLIC: "PUBLIC",
  PRIVATE: "PRIVATE",
} as const;

export type EventDetailDTOStatus =
  (typeof EventDetailDTOStatus)[keyof typeof EventDetailDTOStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventDetailDTOStatus = {
  PENDING_APPROVAL: "PENDING_APPROVAL",
  PLANNED: "PLANNED",
  ACTIVE: "ACTIVE",
  COMPLETED: "COMPLETED",
  CANCELLED: "CANCELLED",
} as const;

export interface EventDetailDTO {
  id?: number;
  title: string;
  sport: string;
  eventDateTime: string;
  type: EventDetailDTOType;
  status: EventDetailDTOStatus;
  creator: ClientDTO;
  location: LocationEventsDTO;
  details?: EventDetailsDTO;
  photos: EventPhotoDTO[];
  participations: EventParticipationDTO[];
  participantsCount: number;
}

export type EventDetailsDTOSkillLevel =
  (typeof EventDetailsDTOSkillLevel)[keyof typeof EventDetailsDTOSkillLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EventDetailsDTOSkillLevel = {
  BEGINNER: "BEGINNER",
  INTERMEDIATE: "INTERMEDIATE",
  ADVANCED: "ADVANCED",
  ALL_LEVELS: "ALL_LEVELS",
} as const;

export interface EventDetailsDTO {
  description?: string;
  maxParticipants?: number;
  costPerPerson: number;
  skillLevel: EventDetailsDTOSkillLevel;
}

export interface EventParticipationDTO {
  client: ClientDTO;
  joinDateTime: string;
}

export interface EventPhotoDTO {
  id?: number;
  photoUrl: string;
  caption?: string;
}

export interface LocationEventsDTO {
  id?: number;
  name: string;
  address: string;
  events: EventSummaryDTO[];
}

export interface BusinessSummaryDTO {
  id: number;
  name: string;
  logoUrl?: string;
}

export type JoinEventHeaders = {
  "X-User-Id": number;
};

export type LeaveEventHeaders = {
  "X-User-Id": number;
};

export type GetMyUserTypeHeaders = {
  "X-User-Id": number;
};

export type GetMyParticipationsHeaders = {
  "X-User-Id": number;
};

/**
 * This is the base client to use for interacting with the API.
 */
export class OpenAPIDefinitionClient {
  private cleanBaseUrl: string;
  private commonRequestParameters: Params;

  constructor(clientOptions: {
    baseUrl: string;
    commonRequestParameters?: Params;
  }) {
    this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, "");

    this.commonRequestParameters = clientOptions.commonRequestParameters || {};
  }

  getOperatingHours(
    businessAccountId: number,
    locationId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: OperatingHourDTO[];
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/operating-hours`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  updateOperatingHours(
    businessAccountId: number,
    locationId: number,
    updateOperatingHoursRequest: UpdateOperatingHoursRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: OperatingHourDTO[];
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/operating-hours`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "PUT",
      url.toString(),
      JSON.stringify(updateOperatingHoursRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getFacilities(
    businessAccountId: number,
    locationId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: FacilityDTO[];
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/facilities`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  updateFacilities(
    businessAccountId: number,
    locationId: number,
    updateFacilitiesRequest: UpdateFacilitiesRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: FacilityDTO[];
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/facilities`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "PUT",
      url.toString(),
      JSON.stringify(updateFacilitiesRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  updateBookingRules(
    businessAccountId: number,
    locationId: number,
    bookingRulesUpdateRequest: BookingRulesUpdateRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationDetailDTO;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/booking-rules`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "PUT",
      url.toString(),
      JSON.stringify(bookingRulesUpdateRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Update business logo URL
   */
  updateBusinessLogo(
    updateLogoRequest: UpdateLogoRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: Unit;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/business-profile/logo`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "PUT",
      url.toString(),
      JSON.stringify(updateLogoRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  registerClient(
    completeClientRegistrationRequest: CompleteClientRegistrationRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/register/client`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(completeClientRegistrationRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  registerBusiness(
    completeBusinessRegistrationRequest: CompleteBusinessRegistrationRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/register/business`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(completeBusinessRegistrationRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Join an event (for authenticated clients)
   */
  joinEvent(
    eventId: number,
    headers: JoinEventHeaders,
    requestParameters?: Params,
  ): {
    response: Response;
    data: Unit;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/events/${eventId}/join`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request("POST", url.toString(), undefined, {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        // In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
        ...Object.fromEntries(
          Object.entries(headers || {}).map(([key, value]) => [
            key,
            String(value),
          ]),
        ),
      },
    });
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Leave an event (for authenticated clients)
   */
  leaveEvent(
    eventId: number,
    headers: LeaveEventHeaders,
    requestParameters?: Params,
  ): {
    response: Response;
    data: Unit;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/events/${eventId}/join`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request("DELETE", url.toString(), undefined, {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        // In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
        ...Object.fromEntries(
          Object.entries(headers || {}).map(([key, value]) => [
            key,
            String(value),
          ]),
        ),
      },
    });
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getAllLocationsForBusiness(
    businessAccountId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationResponse[];
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  createLocation(
    businessAccountId: number,
    locationCreateRequestDTO: LocationCreateRequestDTO,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationResponse;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(locationCreateRequestDTO),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  addPhoto(
    businessAccountId: number,
    locationId: number,
    photoCreateRequest: PhotoCreateRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationPhotoDTO;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/photos`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(photoCreateRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  addSportConfiguration(
    businessAccountId: number,
    locationId: number,
    sportConfigurationDTO: SportConfigurationDTO,
    requestParameters?: Params,
  ): {
    response: Response;
    data: SportConfigurationDTO;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/sport-configurations`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(sportConfigurationDTO),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  addPricingRule(
    businessAccountId: number,
    locationId: number,
    pricingRuleDTO: PricingRuleDTO,
    requestParameters?: Params,
  ): {
    response: Response;
    data: PricingRuleDTO;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/pricing-rules`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(pricingRuleDTO),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  createCompleteLocation(
    businessAccountId: number,
    createCompleteLocationRequestDTO: CreateCompleteLocationRequestDTO,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationDetailDTO;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/create-complete`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(createCompleteLocationRequestDTO),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Add a new photo to the business profile
   */
  addPhoto1(
    photoCreateRequest: PhotoCreateRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: BusinessPhotoDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/business-profile/photos`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(photoCreateRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getCurrentUserProfile(
    clientId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: ClientProfileDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/client-profile/${clientId}/`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  deleteCurrentUserProfile(
    clientId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/client-profile/${clientId}/`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "DELETE",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  updateCurrentUserProfile(
    clientId: number,
    clientProfileUpdateRequestDTO: ClientProfileUpdateRequestDTO,
    requestParameters?: Params,
  ): {
    response: Response;
    data: ClientProfileDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/client-profile/${clientId}/`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "PATCH",
      url.toString(),
      JSON.stringify(clientProfileUpdateRequestDTO),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getLocationById(
    businessAccountId: number,
    locationId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationDetailDTO;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  deleteLocation(
    businessAccountId: number,
    locationId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "DELETE",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  updateLocationDetails(
    businessAccountId: number,
    locationId: number,
    locationUpdateRequest: LocationUpdateRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationResponse;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "PATCH",
      url.toString(),
      JSON.stringify(locationUpdateRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Get current business profile details
   */
  getCurrentBusinessProfile(requestParameters?: Params): {
    response: Response;
    data: BusinessDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/business-profile`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Update business details (partial update)
   */
  updateBusinessDetails(
    businessUpdateRequest: BusinessUpdateRequest,
    requestParameters?: Params,
  ): {
    response: Response;
    data: BusinessDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/business-profile`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "PATCH",
      url.toString(),
      JSON.stringify(businessUpdateRequest),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getMyUserType(
    headers: GetMyUserTypeHeaders,
    requestParameters?: Params,
  ): {
    response: Response;
    data: UserTypeDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/user-type/`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request("GET", url.toString(), undefined, {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        // In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
        ...Object.fromEntries(
          Object.entries(headers || {}).map(([key, value]) => [
            key,
            String(value),
          ]),
        ),
      },
    });
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getAllLocations(requestParameters?: Params): {
    response: Response;
    data: LocationSummaryDTO[];
  } {
    const url = new URL(this.cleanBaseUrl + `/api/locations`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getLocationDetails(
    id: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationDetailDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/locations/${id}`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Get a list of all upcoming public events
   */
  getAllUpcomingEvents(requestParameters?: Params): {
    response: Response;
    data: EventSummaryDTO[];
  } {
    const url = new URL(this.cleanBaseUrl + `/api/events`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Get detailed information about a specific event
   */
  getEventDetails(
    eventId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: EventDetailDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/events/${eventId}`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Get all events the current client is participating in
   */
  getMyParticipations(
    headers: GetMyParticipationsHeaders,
    requestParameters?: Params,
  ): {
    response: Response;
    data: EventSummaryDTO[];
  } {
    const url = new URL(this.cleanBaseUrl + `/api/events/my-participations`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request("GET", url.toString(), undefined, {
      ...mergedRequestParameters,
      headers: {
        ...mergedRequestParameters?.headers,
        // In the schema, headers can be of any type like number but k6 accepts only strings as headers, hence converting all headers to string
        ...Object.fromEntries(
          Object.entries(headers || {}).map(([key, value]) => [
            key,
            String(value),
          ]),
        ),
      },
    });
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  searchBusinesses(requestParameters?: Params): {
    response: Response;
    data: BusinessSummaryDTO[];
  } {
    const url = new URL(this.cleanBaseUrl + `/api/businesses`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getBusinessById(
    id: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: BusinessDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/businesses/${id}`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getSportConfiguration(
    businessAccountId: number,
    locationId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: SportConfigurationDTO[];
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/sport-configuration`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  getAllBusinessPhotos(
    businessAccountId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: LocationPhotoDTO[];
  } {
    const url = new URL(
      this.cleanBaseUrl + `/api/business-profile/${businessAccountId}/photos`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Get all locations for the current business
   */
  getMyBusinessLocations(requestParameters?: Params): {
    response: Response;
    data: BusinessLocationsDTO;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/business-profile/locations`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "GET",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  unregisterBusiness(
    businessId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(
      this.cleanBaseUrl + `/api/register/business/${businessId}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "DELETE",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  deletePhoto(
    businessAccountId: number,
    locationId: number,
    photoId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/photos/${photoId}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "DELETE",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  deleteSportConfiguration(
    businessAccountId: number,
    locationId: number,
    configId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/sport-configurations/${configId}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "DELETE",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  deletePricingRule(
    businessAccountId: number,
    locationId: number,
    ruleId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(
      this.cleanBaseUrl +
        `/api/business-profiles/${businessAccountId}/locations/${locationId}/config/pricing-rules/${ruleId}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "DELETE",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * @summary Delete a photo by its ID
   */
  deletePhoto1(
    photoId: number,
    requestParameters?: Params,
  ): {
    response: Response;
    data: void;
  } {
    const url = new URL(
      this.cleanBaseUrl + `/api/business-profile/photos/${photoId}`,
    );
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "DELETE",
      url.toString(),
      undefined,
      mergedRequestParameters,
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * Merges the provided request parameters with default parameters for the client.
   *
   * @param {Params} requestParameters - The parameters provided specifically for the request
   * @param {Params} commonRequestParameters - Common parameters for all requests
   * @returns {Params} - The merged parameters
   */
  private _mergeRequestParameters(
    requestParameters?: Params,
    commonRequestParameters?: Params,
  ): Params {
    return {
      ...commonRequestParameters, // Default to common parameters
      ...requestParameters, // Override with request-specific parameters
      headers: {
        ...(commonRequestParameters?.headers || {}), // Ensure headers are defined
        ...(requestParameters?.headers || {}),
      },
      cookies: {
        ...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
        ...(requestParameters?.cookies || {}),
      },
      tags: {
        ...(commonRequestParameters?.tags || {}), // Ensure tags are defined
        ...(requestParameters?.tags || {}),
      },
    };
  }
}
